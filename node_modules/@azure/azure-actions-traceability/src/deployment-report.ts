import * as path from 'path';
import * as fs from 'fs';
import * as core from '@actions/core';

import { Artifact, TargetResource, WorkflowRun, Workflow } from "./models";
import { GitHubClient } from "./clients/githubClient";
import { StatusCodes } from "./clients/httpClient";

export class DeploymentReport {
    public artifacts: Artifact[];
    public workflowRun: WorkflowRun;
    public targetResource: TargetResource;
    private _githubClient: GitHubClient;

    public async initialize(gitHubToken: string, artifacts?: Artifact[], pipelineStatus?: string, targetResource?: TargetResource) {
        this.artifacts = artifacts || [];
        this.targetResource = targetResource || null;
        this._githubClient = new GitHubClient(process.env.GITHUB_REPOSITORY, gitHubToken);

        await this.setPipeline(pipelineStatus || "");
    }

    public addArtifacts(artifacts: Artifact[]) {
        if (artifacts) {
            this.artifacts = this.artifacts.concat(artifacts);
        }
    }

    public setTargetResource(targetResource: TargetResource) {
        if (targetResource) {
            this.targetResource = targetResource
        }
    }

    public async setPipeline(status: string) {
        let timeStamp = new Date().toISOString();
        let workflowFilePath = await this._getWorkflowFilePath();
        this.workflowRun = {
            provider: "GitHub",
            workflow: {
                repository: `${process.env.GITHUB_REPOSITORY}`,
                name: `${process.env.GITHUB_WORKFLOW}`,
                path: workflowFilePath,
                ref: `${process.env.GITHUB_REF}`
            } as Workflow,
            runUri: `https://github.com/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID}`,
            createdBy: `${process.env.GITHUB_ACTOR}`,
            jobName: `${process.env.GITHUB_JOB}`,
            creationTimestamp: timeStamp,
            modifiedTimestamp: timeStamp,
            status: status,
            commit: `${process.env.GITHUB_SHA}`
        } as WorkflowRun;
    }

    public export(): string {
        const deploymentReportPath = path.join(process.env['RUNNER_TEMP'], `deployment-report-${Date.now()}.json`);
        const report = {
            artifacts: this.artifacts,
            workflowRun: this.workflowRun,
            targetResource: this.targetResource
        };

        fs.writeFileSync(deploymentReportPath, JSON.stringify(report));
        return deploymentReportPath;
    }

    private async _getWorkflowFilePath(): Promise<string> {
        const workflowRunResponse = await this._githubClient.getWorkflowRun(process.env.GITHUB_RUN_ID);
        let workFlowId = "";
        
        if (workflowRunResponse &&
            workflowRunResponse.statusCode === StatusCodes.OK &&
            workflowRunResponse.body) {
            workFlowId = workflowRunResponse.body['workflow_id'];
        }
        else {
            core.debug(`An error occurred while fetching run details. StatusCode: ${workflowRunResponse.statusCode}, Error: ${workflowRunResponse.statusMessage}`);
            return Promise.resolve("");
        }

        const workflowResponse = await this._githubClient.getWorkflow(workFlowId);
        if (workflowResponse &&
            workflowResponse.statusCode === StatusCodes.OK &&
            workflowResponse.body) {
            
            return Promise.resolve(workflowResponse.body['path']);
        }
        else {
            core.debug(`An error occurred while fetching workflow details. StatusCode: ${workflowResponse.statusCode}, Error: ${workflowResponse.statusMessage}`);
            return Promise.resolve("");
        }
    }
}