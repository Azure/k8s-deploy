import * as path from 'path';
import * as fs from 'fs';

import { Artifact, TargetResource, Pipeline, GitHubPipelineProperties } from "./models";

export class DeploymentReport {
    public artifacts: Artifact[];
    public pipeline: Pipeline;
    public targetResource: TargetResource;

    constructor(artifacts?: Artifact[], pipelineStatus?: string, targetResource?: TargetResource) {
        this.artifacts = artifacts || [];
        this.setPipeline(pipelineStatus);
        this.targetResource = targetResource || null;
    }

    public addArtifacts(artifacts: Artifact[]) {
        if (artifacts) {
            this.artifacts = this.artifacts.concat(artifacts);
        }
    }

    public setTargetResource(targetResource: TargetResource) {
        if (targetResource) {
            this.targetResource = targetResource
        }
    }

    public setPipeline(status: string) {
        this.pipeline = {
            provider: "GitHub",
            properties: this.getGitHubPipelineProperties(status)
        } as Pipeline;
    }

    public export(){
        const deploymentReportPath = path.join(process.env['RUNNER_TEMP'], `deployment-report-${Date.now()}.json`);
        fs.writeFileSync(deploymentReportPath, JSON.stringify(this));

        return deploymentReportPath;
    }

    private getGitHubPipelineProperties(status: string, workflowFilePath?: string): GitHubPipelineProperties {
        let properties: GitHubPipelineProperties = {
            run: `${process.env.GITHUB_RUN_ID}`,
            repository: `${process.env.GITHUB_REPOSITORY}`,
            workflow: `${workflowFilePath || process.env.GITHUB_WORKFLOW}`,
            jobName: `${process.env.GITHUB_JOB}`,
            createdBy: `${process.env.GITHUB_ACTOR}`,
            runUri: `https://github.com/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID}`,
            commit: `${process.env.GITHUB_SHA}`,
            branch: `${process.env.GITHUB_REF}`,
            creationTimestamp: '',
            modifiedTimestamp: `${(new Date()).toString()}`,
            status: status,
        }
        
        return properties;
    }
}