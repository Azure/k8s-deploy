"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DeploymentReport = void 0;
const path = require("path");
const fs = require("fs");
class DeploymentReport {
    constructor(artifacts, pipelineStatus, targetResource) {
        this.artifacts = artifacts || [];
        this.setPipeline(pipelineStatus);
        this.targetResource = targetResource || null;
    }
    addArtifacts(artifacts) {
        if (artifacts) {
            this.artifacts = this.artifacts.concat(artifacts);
        }
    }
    setTargetResource(targetResource) {
        if (targetResource) {
            this.targetResource = targetResource;
        }
    }
    setPipeline(status) {
        this.pipeline = {
            provider: "GitHub",
            properties: this.getGitHubPipelineProperties(status)
        };
    }
    export() {
        const deploymentReportPath = path.join(process.env['RUNNER_TEMP'], `deployment-report-${Date.now()}.json`);
        fs.writeFileSync(deploymentReportPath, JSON.stringify(this));
        return deploymentReportPath;
    }
    getGitHubPipelineProperties(status, workflowFilePath) {
        let properties = {
            run: `${process.env.GITHUB_RUN_ID}`,
            repository: `${process.env.GITHUB_REPOSITORY}`,
            workflow: `${workflowFilePath || process.env.GITHUB_WORKFLOW}`,
            jobName: `${process.env.GITHUB_JOB}`,
            createdBy: `${process.env.GITHUB_ACTOR}`,
            runUri: `https://github.com/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID}`,
            commit: `${process.env.GITHUB_SHA}`,
            branch: `${process.env.GITHUB_REF}`,
            creationTimestamp: '',
            modifiedTimestamp: `${(new Date()).toString()}`,
            status: status,
        };
        return properties;
    }
}
exports.DeploymentReport = DeploymentReport;
