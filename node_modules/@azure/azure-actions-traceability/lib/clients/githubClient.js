"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GitHubClient = void 0;
const httpClient_1 = require("./httpClient");
const core = require("@actions/core");
class GitHubClient {
    constructor(repository, token) {
        this._baseUri = 'https://api.github.com';
        this._repository = repository;
        this._token = token;
    }
    getWorkflowRun(runId) {
        return __awaiter(this, void 0, void 0, function* () {
            const requestUri = `${this._baseUri}/repos/${this._repository}/actions/runs/${runId}`;
            core.debug(`Getting workflow run for repo: ${this._repository} and runId: ${runId}`);
            return this._beginRequest(requestUri, "GET");
        });
    }
    getWorkflow(workflowId) {
        return __awaiter(this, void 0, void 0, function* () {
            const requestUri = `${this._baseUri}/repos/${this._repository}/actions/workflows/${workflowId}`;
            core.debug(`Getting workflow for repo: ${this._repository} and workflowId: ${workflowId}`);
            return this._beginRequest(requestUri, "GET");
        });
    }
    _beginRequest(uri, method) {
        return __awaiter(this, void 0, void 0, function* () {
            const webRequest = new httpClient_1.WebRequest();
            webRequest.method = method;
            webRequest.uri = uri;
            webRequest.headers = {
                Authorization: `Bearer ${this._token}`
            };
            const response = yield httpClient_1.sendRequest(webRequest);
            return Promise.resolve(response);
        });
    }
}
exports.GitHubClient = GitHubClient;
